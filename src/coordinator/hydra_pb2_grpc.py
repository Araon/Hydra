# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import hydra_pb2 as hydra__pb2


class WorkerServiceStub(object):
    """The worker service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTask = channel.unary_unary(
                '/grpcapi.WorkerService/SubmitTask',
                request_serializer=hydra__pb2.TaskRequest.SerializeToString,
                response_deserializer=hydra__pb2.TaskResponse.FromString,
                )


class WorkerServiceServicer(object):
    """The worker service definition.
    """

    def SubmitTask(self, request, context):
        """Sends a task to the worker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=hydra__pb2.TaskRequest.FromString,
                    response_serializer=hydra__pb2.TaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcapi.WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerService(object):
    """The worker service definition.
    """

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcapi.WorkerService/SubmitTask',
            hydra__pb2.TaskRequest.SerializeToString,
            hydra__pb2.TaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CoordinatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTask = channel.unary_unary(
                '/grpcapi.CoordinatorService/SubmitTask',
                request_serializer=hydra__pb2.ClientTaskRequest.SerializeToString,
                response_deserializer=hydra__pb2.ClientTaskResponse.FromString,
                )
        self.SendHeartbeat = channel.unary_unary(
                '/grpcapi.CoordinatorService/SendHeartbeat',
                request_serializer=hydra__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=hydra__pb2.HeartbeatResponse.FromString,
                )
        self.UpdateTaskStatus = channel.unary_unary(
                '/grpcapi.CoordinatorService/UpdateTaskStatus',
                request_serializer=hydra__pb2.UpdateTaskStatusRequest.SerializeToString,
                response_deserializer=hydra__pb2.UpdateTaskStatusResponse.FromString,
                )


class CoordinatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitTask(self, request, context):
        """Sends a task request to the coordinator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Sends a heartbeat to the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTaskStatus(self, request, context):
        """Updates a Task Status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=hydra__pb2.ClientTaskRequest.FromString,
                    response_serializer=hydra__pb2.ClientTaskResponse.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=hydra__pb2.HeartbeatRequest.FromString,
                    response_serializer=hydra__pb2.HeartbeatResponse.SerializeToString,
            ),
            'UpdateTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTaskStatus,
                    request_deserializer=hydra__pb2.UpdateTaskStatusRequest.FromString,
                    response_serializer=hydra__pb2.UpdateTaskStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcapi.CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcapi.CoordinatorService/SubmitTask',
            hydra__pb2.ClientTaskRequest.SerializeToString,
            hydra__pb2.ClientTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcapi.CoordinatorService/SendHeartbeat',
            hydra__pb2.HeartbeatRequest.SerializeToString,
            hydra__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcapi.CoordinatorService/UpdateTaskStatus',
            hydra__pb2.UpdateTaskStatusRequest.SerializeToString,
            hydra__pb2.UpdateTaskStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
